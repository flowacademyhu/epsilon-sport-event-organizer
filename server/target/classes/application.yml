spring:
  datasource:
    url: jdbc:postgresql://127.0.0.1:5432/sport_event_organizer
    username: sport_event_organizer
    password: 123456
    driver-class-name: org.postgresql.Driver
  jpa:
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 758778906713-cobakr9he4fbp71uhl0d70306m6tfngk.apps.googleusercontent.com
            clientSecret: _eSrSdKIeZrr581-nFKQuN_Q
            redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
              - openid
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:4200/oauth2/redirect
      # - myandroidapp://oauth2/redirect
      # - myiosapp://oauth2/redirect

