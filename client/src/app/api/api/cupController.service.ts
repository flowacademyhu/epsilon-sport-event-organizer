/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Cup } from '../model/cup';
import { Team } from '../model/team';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CupControllerService {

    protected basePath = 'https://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createCup
     * 
     * @param team team
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createCupUsingPOST(team: Cup, observe?: 'body', reportProgress?: boolean): Observable<Cup>;
    public createCupUsingPOST(team: Cup, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cup>>;
    public createCupUsingPOST(team: Cup, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cup>>;
    public createCupUsingPOST(team: Cup, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (team === null || team === undefined) {
            throw new Error('Required parameter team was null or undefined when calling createCupUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Cup>(`${this.basePath}/cup`,
            team,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteCup
     * 
     * @param cupName cupName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCupUsingDELETE(cupName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCupUsingDELETE(cupName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCupUsingDELETE(cupName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCupUsingDELETE(cupName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cupName === null || cupName === undefined) {
            throw new Error('Required parameter cupName was null or undefined when calling deleteCupUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/cup/${encodeURIComponent(String(cupName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteOrganizer
     * 
     * @param cupName cupName
     * @param googleName googleName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrganizerUsingDELETE(cupName: string, googleName: string, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public deleteOrganizerUsingDELETE(cupName: string, googleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public deleteOrganizerUsingDELETE(cupName: string, googleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public deleteOrganizerUsingDELETE(cupName: string, googleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cupName === null || cupName === undefined) {
            throw new Error('Required parameter cupName was null or undefined when calling deleteOrganizerUsingDELETE.');
        }

        if (googleName === null || googleName === undefined) {
            throw new Error('Required parameter googleName was null or undefined when calling deleteOrganizerUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<Array<User>>(`${this.basePath}/cup/organizer/${encodeURIComponent(String(googleName))}/${encodeURIComponent(String(cupName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteTeam
     * 
     * @param cupName cupName
     * @param teamName teamName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTeamUsingDELETE(cupName: string, teamName: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Team>>;
    public deleteTeamUsingDELETE(cupName: string, teamName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Team>>>;
    public deleteTeamUsingDELETE(cupName: string, teamName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Team>>>;
    public deleteTeamUsingDELETE(cupName: string, teamName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cupName === null || cupName === undefined) {
            throw new Error('Required parameter cupName was null or undefined when calling deleteTeamUsingDELETE.');
        }

        if (teamName === null || teamName === undefined) {
            throw new Error('Required parameter teamName was null or undefined when calling deleteTeamUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<Array<Team>>(`${this.basePath}/cup/team/${encodeURIComponent(String(teamName))}/${encodeURIComponent(String(cupName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllCups
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllCupsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Cup>>;
    public getAllCupsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cup>>>;
    public getAllCupsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cup>>>;
    public getAllCupsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Cup>>(`${this.basePath}/cup/with-deleted`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllNonDeletedCups
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllNonDeletedCupsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Cup>>;
    public getAllNonDeletedCupsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cup>>>;
    public getAllNonDeletedCupsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cup>>>;
    public getAllNonDeletedCupsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Cup>>(`${this.basePath}/cup`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getByCupName
     * 
     * @param name name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByCupNameUsingGET(name: string, observe?: 'body', reportProgress?: boolean): Observable<Cup>;
    public getByCupNameUsingGET(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cup>>;
    public getByCupNameUsingGET(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cup>>;
    public getByCupNameUsingGET(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getByCupNameUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Cup>(`${this.basePath}/cup/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCupByOrganizer
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCupByOrganizerUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Cup>>;
    public getCupByOrganizerUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cup>>>;
    public getCupByOrganizerUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cup>>>;
    public getCupByOrganizerUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Cup>>(`${this.basePath}/cup/organizer`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCupsByCompany
     * 
     * @param company company
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCupsByCompanyUsingGET(company: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Cup>>;
    public getCupsByCompanyUsingGET(company: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cup>>>;
    public getCupsByCompanyUsingGET(company: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cup>>>;
    public getCupsByCompanyUsingGET(company: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (company === null || company === undefined) {
            throw new Error('Required parameter company was null or undefined when calling getCupsByCompanyUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Cup>>(`${this.basePath}/cup/${encodeURIComponent(String(company))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * putOrganizer
     * 
     * @param cupName cupName
     * @param googleName googleName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putOrganizerUsingPUT(cupName: string, googleName: string, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public putOrganizerUsingPUT(cupName: string, googleName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public putOrganizerUsingPUT(cupName: string, googleName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public putOrganizerUsingPUT(cupName: string, googleName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cupName === null || cupName === undefined) {
            throw new Error('Required parameter cupName was null or undefined when calling putOrganizerUsingPUT.');
        }

        if (googleName === null || googleName === undefined) {
            throw new Error('Required parameter googleName was null or undefined when calling putOrganizerUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<Array<User>>(`${this.basePath}/cup/organizer/${encodeURIComponent(String(googleName))}/${encodeURIComponent(String(cupName))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * putTeam
     * 
     * @param cupName cupName
     * @param teamName teamName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putTeamUsingPUT(cupName: string, teamName: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Team>>;
    public putTeamUsingPUT(cupName: string, teamName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Team>>>;
    public putTeamUsingPUT(cupName: string, teamName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Team>>>;
    public putTeamUsingPUT(cupName: string, teamName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cupName === null || cupName === undefined) {
            throw new Error('Required parameter cupName was null or undefined when calling putTeamUsingPUT.');
        }

        if (teamName === null || teamName === undefined) {
            throw new Error('Required parameter teamName was null or undefined when calling putTeamUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<Array<Team>>(`${this.basePath}/cup/team/${encodeURIComponent(String(teamName))}/${encodeURIComponent(String(cupName))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateCup
     * 
     * @param cup cup
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCupUsingPUT(cup: Cup, observe?: 'body', reportProgress?: boolean): Observable<Cup>;
    public updateCupUsingPUT(cup: Cup, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cup>>;
    public updateCupUsingPUT(cup: Cup, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cup>>;
    public updateCupUsingPUT(cup: Cup, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cup === null || cup === undefined) {
            throw new Error('Required parameter cup was null or undefined when calling updateCupUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Cup>(`${this.basePath}/cup`,
            cup,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
