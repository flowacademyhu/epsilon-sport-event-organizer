/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Team } from '../model/team';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TeamResourceService {

    protected basePath = 'https://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createTeam
     * 
     * @param team team
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTeamUsingPOST(team: Team, observe?: 'body', reportProgress?: boolean): Observable<Team>;
    public createTeamUsingPOST(team: Team, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Team>>;
    public createTeamUsingPOST(team: Team, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Team>>;
    public createTeamUsingPOST(team: Team, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (team === null || team === undefined) {
            throw new Error('Required parameter team was null or undefined when calling createTeamUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Team>(`${this.basePath}/team`,
            team,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteLeader
     * 
     * @param googleName googleName
     * @param teamName teamName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteLeaderUsingDELETE(googleName: string, teamName: string, observe?: 'body', reportProgress?: boolean): Observable<Team>;
    public deleteLeaderUsingDELETE(googleName: string, teamName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Team>>;
    public deleteLeaderUsingDELETE(googleName: string, teamName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Team>>;
    public deleteLeaderUsingDELETE(googleName: string, teamName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (googleName === null || googleName === undefined) {
            throw new Error('Required parameter googleName was null or undefined when calling deleteLeaderUsingDELETE.');
        }

        if (teamName === null || teamName === undefined) {
            throw new Error('Required parameter teamName was null or undefined when calling deleteLeaderUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<Team>(`${this.basePath}/team/leader/${encodeURIComponent(String(teamName))}/${encodeURIComponent(String(googleName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteMember
     * 
     * @param googleName googleName
     * @param teamName teamName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteMemberUsingDELETE(googleName: string, teamName: string, observe?: 'body', reportProgress?: boolean): Observable<Team>;
    public deleteMemberUsingDELETE(googleName: string, teamName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Team>>;
    public deleteMemberUsingDELETE(googleName: string, teamName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Team>>;
    public deleteMemberUsingDELETE(googleName: string, teamName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (googleName === null || googleName === undefined) {
            throw new Error('Required parameter googleName was null or undefined when calling deleteMemberUsingDELETE.');
        }

        if (teamName === null || teamName === undefined) {
            throw new Error('Required parameter teamName was null or undefined when calling deleteMemberUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<Team>(`${this.basePath}/team/member/${encodeURIComponent(String(teamName))}/${encodeURIComponent(String(googleName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteTeam
     * 
     * @param name name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTeamUsingDELETE(name: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteTeamUsingDELETE(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteTeamUsingDELETE(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteTeamUsingDELETE(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteTeamUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/team/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllTeamsByCompany
     * 
     * @param companies companies
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllTeamsByCompanyUsingGET(companies: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Team>>;
    public getAllTeamsByCompanyUsingGET(companies: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Team>>>;
    public getAllTeamsByCompanyUsingGET(companies: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Team>>>;
    public getAllTeamsByCompanyUsingGET(companies: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (companies === null || companies === undefined) {
            throw new Error('Required parameter companies was null or undefined when calling getAllTeamsByCompanyUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Team>>(`${this.basePath}/team/company/${encodeURIComponent(String(companies))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllTeamsByLeader
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllTeamsByLeaderUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Team>>;
    public getAllTeamsByLeaderUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Team>>>;
    public getAllTeamsByLeaderUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Team>>>;
    public getAllTeamsByLeaderUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Team>>(`${this.basePath}/team/leader`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllTeamsByMember
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllTeamsByMemberUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Team>>;
    public getAllTeamsByMemberUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Team>>>;
    public getAllTeamsByMemberUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Team>>>;
    public getAllTeamsByMemberUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Team>>(`${this.basePath}/team/member`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllTeams
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllTeamsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Team>>;
    public getAllTeamsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Team>>>;
    public getAllTeamsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Team>>>;
    public getAllTeamsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Team>>(`${this.basePath}/team`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getTeamByName
     * 
     * @param names names
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeamByNameUsingGET(names: string, observe?: 'body', reportProgress?: boolean): Observable<Team>;
    public getTeamByNameUsingGET(names: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Team>>;
    public getTeamByNameUsingGET(names: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Team>>;
    public getTeamByNameUsingGET(names: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (names === null || names === undefined) {
            throw new Error('Required parameter names was null or undefined when calling getTeamByNameUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Team>(`${this.basePath}/team/${encodeURIComponent(String(names))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * putGuestMember
     * 
     * @param guestEmail guestEmail
     * @param guestName guestName
     * @param teamLeader teamLeader
     * @param teamName teamName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putGuestMemberUsingPOST(guestEmail: string, guestName: string, teamLeader: string, teamName: string, observe?: 'body', reportProgress?: boolean): Observable<Team>;
    public putGuestMemberUsingPOST(guestEmail: string, guestName: string, teamLeader: string, teamName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Team>>;
    public putGuestMemberUsingPOST(guestEmail: string, guestName: string, teamLeader: string, teamName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Team>>;
    public putGuestMemberUsingPOST(guestEmail: string, guestName: string, teamLeader: string, teamName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (guestEmail === null || guestEmail === undefined) {
            throw new Error('Required parameter guestEmail was null or undefined when calling putGuestMemberUsingPOST.');
        }

        if (guestName === null || guestName === undefined) {
            throw new Error('Required parameter guestName was null or undefined when calling putGuestMemberUsingPOST.');
        }

        if (teamLeader === null || teamLeader === undefined) {
            throw new Error('Required parameter teamLeader was null or undefined when calling putGuestMemberUsingPOST.');
        }

        if (teamName === null || teamName === undefined) {
            throw new Error('Required parameter teamName was null or undefined when calling putGuestMemberUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Team>(`${this.basePath}/team/member/guest/${encodeURIComponent(String(teamName))}/${encodeURIComponent(String(teamLeader))}/${encodeURIComponent(String(guestName))}/${encodeURIComponent(String(guestEmail))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * putLeader
     * 
     * @param googleName googleName
     * @param teamName teamName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putLeaderUsingPUT(googleName: string, teamName: string, observe?: 'body', reportProgress?: boolean): Observable<Team>;
    public putLeaderUsingPUT(googleName: string, teamName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Team>>;
    public putLeaderUsingPUT(googleName: string, teamName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Team>>;
    public putLeaderUsingPUT(googleName: string, teamName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (googleName === null || googleName === undefined) {
            throw new Error('Required parameter googleName was null or undefined when calling putLeaderUsingPUT.');
        }

        if (teamName === null || teamName === undefined) {
            throw new Error('Required parameter teamName was null or undefined when calling putLeaderUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<Team>(`${this.basePath}/team/leader/${encodeURIComponent(String(teamName))}/${encodeURIComponent(String(googleName))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * putMember
     * 
     * @param googleName googleName
     * @param teamName teamName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putMemberUsingPUT(googleName: string, teamName: string, observe?: 'body', reportProgress?: boolean): Observable<Team>;
    public putMemberUsingPUT(googleName: string, teamName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Team>>;
    public putMemberUsingPUT(googleName: string, teamName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Team>>;
    public putMemberUsingPUT(googleName: string, teamName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (googleName === null || googleName === undefined) {
            throw new Error('Required parameter googleName was null or undefined when calling putMemberUsingPUT.');
        }

        if (teamName === null || teamName === undefined) {
            throw new Error('Required parameter teamName was null or undefined when calling putMemberUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<Team>(`${this.basePath}/team/member/${encodeURIComponent(String(teamName))}/${encodeURIComponent(String(googleName))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateTeam
     * 
     * @param team team
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTeamUsingPUT(team: Team, observe?: 'body', reportProgress?: boolean): Observable<Team>;
    public updateTeamUsingPUT(team: Team, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Team>>;
    public updateTeamUsingPUT(team: Team, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Team>>;
    public updateTeamUsingPUT(team: Team, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (team === null || team === undefined) {
            throw new Error('Required parameter team was null or undefined when calling updateTeamUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Team>(`${this.basePath}/team`,
            team,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
